package QueueHW;

public class ArrayQueue<E> implements Queue<E> {
	  // instance variables
	  public static final int CAPACITY = 1000;      // default array capacity

	  private E[] data;                             // generic array used for storage

	  private int f = 0;                            // index of the front element

	  private int sz = 0;                           // current number of elements

	  // constructors
	  public ArrayQueue() {this(CAPACITY);}         // constructs queue with default capacity

	  @SuppressWarnings({"unchecked"})
	  public ArrayQueue(int capacity) {             // constructs queue with given capacity
	    data = (E[]) new Object[capacity];          // safe cast; compiler may give warning
	  }

	  // methods
	  
	  public int size() { return sz; }

	  /** Tests whether the queue is empty. */
	  
	  public boolean isEmpty() { return (sz == 0); }

	 
	  @Override
	  public void enqueue(E e) throws IllegalStateException {
	    if (sz == data.length) throw new IllegalStateException("Queue is full");
	    int avail = (f + sz) % data.length;   // use modular arithmetic
	    data[avail] = e;
	    sz++;
	  }

	  /**
	   * Returns, but does not remove, the first element of the queue.
	   * @return the first element of the queue (or null if empty)
	   */
	  
	  public E first() {
		  if (isEmpty()) return null;
	    return data[f];
	  }

	  /**
	   * Removes and returns the first element of the queue.
	   * @return element removed (or null if empty)
	   */
	  @Override
	  public E dequeue() {
	    if (isEmpty()) return null;
	    
	    E item = data[f];
	    f = (f + 1) % data.length;
	    sz--;
	    return item;
	  }

	  /**
	   * Returns a string representation of the queue as a list of elements.
	   * This method runs in O(n) time, where n is the size of the queue.
	   * @return textual representation of the queue.
	   */
	  public String toString() {
	    StringBuilder sb = new StringBuilder("(");
	    int k = f;
	    for (int j=0; j < sz; j++) {
	      if (j > 0)
	        sb.append(", ");
	      sb.append(data[k]);
	      k = (k + 1) % data.length;
	    }
	    sb.append(")");
	    return sb.toString();
	  }
	  
	  void display() {
		    int i;
		    if (isEmpty()) {
		      System.out.println("Empty Queue");
		    }
		    else {

		      // display element of the queue
		      System.out.print("Primes: ");
		      for (i = f; i < sz; i++)
		        System.out.print(data[i] + "  ");
		    }
	  }

	}
