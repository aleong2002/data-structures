package HuffmanHW;

public class HuffmanTree {

	HuffmanNode root;
	
	public HuffmanTree(HuffmanNode huff) {
		this.root = huff;
	}
		
	public void printLegend() {
		printLegend(root, "");
	}
	
	private void printLegend(HuffmanNode t, String s) {
		if (t.letter.length() > 1) {
			printLegend(t.left, s + "1");
			printLegend(t.right, s + "0");
		}
		
		else {
			System.out.println(t.letter + "=" + s);
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static BinaryHeap legendToHeap(String legend) {
		String[] legsplit = legend.split(" ");
		HuffmanNode[] x = new HuffmanNode[legsplit.length / 2];
		int o = 0;
		for (int j = 0; j < legsplit.length; j+=2) {
			HuffmanNode hn = new HuffmanNode(legsplit[j], (Double) Double.parseDouble(legsplit[j+1]));
			x[o] = hn;
			o++;
		}
		BinaryHeap b = new BinaryHeap(x);
		return b;
	}
	
	public static HuffmanTree createFromHeap(BinaryHeap b) {
		while (b.getSize() > 1) {
			HuffmanNode min1 = (HuffmanNode) b.deleteMin();
			HuffmanNode min2 = (HuffmanNode) b.deleteMin();
			
			HuffmanNode newnode = new HuffmanNode(min1, min2);
			b.insert(newnode);
		}
		HuffmanTree t = new HuffmanTree((HuffmanNode) b.findMin());
		return t;
	}
	
	public static void main(String[] args) {
		String legend = "A 20 E 24 G 3 H 4 I 17 L 6 N 5 O 10 S 8 V 1 W 2";
		BinaryHeap bh = legendToHeap(legend);
		bh.printHeap();
		
		HuffmanTree htree = createFromHeap(bh);
		htree.printLegend();
	}
}
