package HuffmanHW;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

///Users/aleon/eclipse-workspace/ds22.java/src/HuffmanHW/love_poem_80.txt

public class HuffmanConverter {

	public static final int NUMBER_OF_CHARACTERS = 256;
	
	// the contents of our message...
	private String contents;
	
	// the tree created from the msg
	private HuffmanTree huffmanTree;
	
	// tracks how often each character occurs
	private int count[];
	
	// the huffman code for each character
	private String code[];
	
	// stores the # of unique chars in contents
	private int uniqueChars = 0; //(optional)
	
	private ArrayList<Character> uniqueChar;
	
	/** Constructor taking input String to be converted */
	public HuffmanConverter(String input)
	{
	this.contents = input;
	this.count = new int[NUMBER_OF_CHARACTERS];
	this.code = new String[NUMBER_OF_CHARACTERS];
	}
	
	/**
	* Records the frequencies that each character of our
	* message occurs...
	* I.e., we use 'contents' to fill up the count[] list...
	*/
	public void recordFrequencies() {
		uniqueChar = new ArrayList<Character>();

		for (int i = 0; i < contents.length(); i++)  {
			if (uniqueChar.contains(contents.charAt(i))) {
				continue;
			}
			else {

				uniqueChar.add(contents.charAt(i));

			}
		}
		this.uniqueChars = uniqueChar.size();

		for (int j = 0; j < uniqueChars; j++) {
			int counter = 0;
			for (int i = 0; i < contents.length(); i++) {

				if (uniqueChar.get(j) == contents.charAt(i)) {
					counter++;
				}
				count[j] = counter;
			}
		}
	}
	/**
	* Converts our frequency list into a Huffman Tree. We do this by
	* taking our count[] list of frequencies, and creating a binary
	* heap in a manner similar to how a heap was made in HuffmanTree's
	* fileToHeap method. Then, we print the heap, and make a call to
	* HuffmanTree.heapToTree() method to get our much desired
	* HuffmanTree object, which we store as huffmanTree.
	*/
	public void frequenciesToTree() {		
		HuffmanNode[] x = new HuffmanNode[uniqueChars];
		int o = 0;
		for (int i = 0; i < uniqueChars; i++) {
			HuffmanNode hn = new HuffmanNode(Character.toString(uniqueChar.get(i)), Double.valueOf(count[i]));
			x[o] = hn;
			o++;
		}
		BinaryHeap b = new BinaryHeap(x);
		b.printHeap();
		huffmanTree = HuffmanTree.createFromHeap(b);
		
	}
	/**
	* Iterates over the huffmanTree to get the code for each letter.
	* The code for letter i gets stored as code[i]... This method
	* behaves similarly to HuffmanTree's printLegend() method...
	* Warning: Don't forget to initialize each code[i] to ""
	* BEFORE calling the recursive version of treeToCode...
	*/
	public void treeToCode() {
		treeToCode(huffmanTree.root, "");
	}
	/*
	* A private method to iterate over a HuffmanNode t using s, which
	* contains what we know of the HuffmanCode up to node t. This is
	* called by treeToCode(), and resembles the recursive printLegend
	* method in the HuffmanTree class. Note that when t is a leaf node,
	* t's letter tells us which index i to access in code[], and tells
	* us what to set code[i] to...
	*/

	private void treeToCode(HuffmanNode t, String s) {
		if (t.letter.length() > 1 || t.letter.equals("\\n") || t.letter.equals("\\t")) {
			treeToCode(t.left, s + "0");
			treeToCode(t.right, s + "1");
		}
		else {
			if (t.letter.equals("\n")) {
				System.out.println("'\\n' = " + s + " ");
				code[uniqueChar.indexOf(t.letter.charAt(0))] = s;

			}
			
			else if (t.letter.equals("\t")) {
				System.out.println("'\\t' = " + s + " ");
				code[uniqueChar.indexOf(t.letter.charAt(0))] = s;
			}
			else {
				System.out.print("'" + t.letter + "' = " + s + " ");
				code[uniqueChar.indexOf(t.letter.charAt(0))] = s;
			}
		}
	}
	/**
	* Using the message stored in contents and the huffman conversions
	* stored in code[], we create the Huffman encoding for our message
	* (a String of 0's and 1's), and return it...
	*/
	public String encodeMessage() {
		String encoded = "";
		
		for (int j = 0; j < contents.length(); j++) {
			encoded += code[uniqueChar.indexOf(contents.charAt(j))];
		}
		
		return encoded;
	}
	/**
	* Reads in the contents of the file named filename and returns
	* it as a String. The main method calls this method on args[0]...
	*/
	public static String readContents(String filename) throws FileNotFoundException {
				
		String contents = "";
		
		File file = new File(filename);
		Scanner scanner = new Scanner(file);
		
		
		scanner.useDelimiter("\\Z");
		contents += scanner.next();
		contents += "\n";
		scanner.close();
		
		return contents;
	}
	
	/**
	* Using the encoded String argument, and the huffman codings,
	* re-create the original message from our
	* huffman encoding and return it...
	*/
	public String decodeMessage(String encodedStr) {
		String decoded = "";
		
		while(encodedStr.length() != 0) {
			int length = 0;
			for (int i = 0; i < uniqueChars; i++) {
				if(code[i] != null) {
					length = code[i].length();
					if(encodedStr.length() < length) {
						continue;
					}
					
					if (code[i].equals(encodedStr.substring(0, length))) {
						decoded += uniqueChar.get(i);
						encodedStr = encodedStr.substring(length);
						break;
					}
				}
			}
		}
		//System.out.println(decoded);
		return decoded;	
	}
	/**
	* Uses args[0] as the filename, and reads in its contents. Then
	* instantiates a HuffmanConverter object, using its methods to
	* obtain our results and print the necessary output. Finally,
	* decode the message and compare it to the input file.
	* NOTE: Example method provided below...
	 * @throws FileNotFoundException 
	*/
	public static void main(String args[]) throws FileNotFoundException
	{	
		String contents = readContents(args[0]);
		
		HuffmanConverter x = new HuffmanConverter(contents);

		//System.out.println(contents);
		
		x.recordFrequencies();
		
		System.out.println("\nHuffman Heap");
		x.frequenciesToTree();
		
		System.out.println();
		System.out.println("Bits");
		x.treeToCode();
		
		System.out.println();
		System.out.println("Encoded Message");
		System.out.println(x.encodeMessage());
		
		System.out.println();
		System.out.println("Message size in ASCII encoding: " + (contents.length() * 8));
		
		System.out.println();
		System.out.println("Message size in Huffman encoding: " + x.encodeMessage().length());
		
		System.out.println();
		System.out.println("Decoded Message");
		System.out.println(x.decodeMessage(x.encodeMessage()));
	}
}
